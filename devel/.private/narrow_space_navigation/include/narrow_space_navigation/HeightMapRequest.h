// Generated by gencpp from file narrow_space_navigation/HeightMapRequest.msg
// DO NOT EDIT!


#ifndef NARROW_SPACE_NAVIGATION_MESSAGE_HEIGHTMAPREQUEST_H
#define NARROW_SPACE_NAVIGATION_MESSAGE_HEIGHTMAPREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace narrow_space_navigation
{
template <class ContainerAllocator>
struct HeightMapRequest_
{
  typedef HeightMapRequest_<ContainerAllocator> Type;

  HeightMapRequest_()
    : points()
    , warped()
    , timestamp()  {
    }
  HeightMapRequest_(const ContainerAllocator& _alloc)
    : points(_alloc)
    , warped(_alloc)
    , timestamp()  {
  (void)_alloc;
    }



   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _points_type;
  _points_type points;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _warped_type;
  _warped_type warped;

   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;





  typedef boost::shared_ptr< ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator> const> ConstPtr;

}; // struct HeightMapRequest_

typedef ::narrow_space_navigation::HeightMapRequest_<std::allocator<void> > HeightMapRequest;

typedef boost::shared_ptr< ::narrow_space_navigation::HeightMapRequest > HeightMapRequestPtr;
typedef boost::shared_ptr< ::narrow_space_navigation::HeightMapRequest const> HeightMapRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator1> & lhs, const ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator2> & rhs)
{
  return lhs.points == rhs.points &&
    lhs.warped == rhs.warped &&
    lhs.timestamp == rhs.timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator1> & lhs, const ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace narrow_space_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee7fa9c0b1c955d8f4f258e33e8eedc4";
  }

  static const char* value(const ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xee7fa9c0b1c955d8ULL;
  static const uint64_t static_value2 = 0xf4f258e33e8eedc4ULL;
};

template<class ContainerAllocator>
struct DataType< ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "narrow_space_navigation/HeightMapRequest";
  }

  static const char* value(const ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] points\n"
"int32[] warped\n"
"time timestamp\n"
"# nav_msgs/OccupancyGrid warped\n"
;
  }

  static const char* value(const ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.points);
      stream.next(m.warped);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HeightMapRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::narrow_space_navigation::HeightMapRequest_<ContainerAllocator>& v)
  {
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.points[i]);
    }
    s << indent << "warped[]" << std::endl;
    for (size_t i = 0; i < v.warped.size(); ++i)
    {
      s << indent << "  warped[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.warped[i]);
    }
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NARROW_SPACE_NAVIGATION_MESSAGE_HEIGHTMAPREQUEST_H
