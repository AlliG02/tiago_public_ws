// Generated by gencpp from file narrow_space_navigation/HeightMapResponse.msg
// DO NOT EDIT!


#ifndef NARROW_SPACE_NAVIGATION_MESSAGE_HEIGHTMAPRESPONSE_H
#define NARROW_SPACE_NAVIGATION_MESSAGE_HEIGHTMAPRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace narrow_space_navigation
{
template <class ContainerAllocator>
struct HeightMapResponse_
{
  typedef HeightMapResponse_<ContainerAllocator> Type;

  HeightMapResponse_()
    : status(false)
    , pose()  {
    }
  HeightMapResponse_(const ContainerAllocator& _alloc)
    : status(false)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _status_type;
  _status_type status;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;





  typedef boost::shared_ptr< ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator> const> ConstPtr;

}; // struct HeightMapResponse_

typedef ::narrow_space_navigation::HeightMapResponse_<std::allocator<void> > HeightMapResponse;

typedef boost::shared_ptr< ::narrow_space_navigation::HeightMapResponse > HeightMapResponsePtr;
typedef boost::shared_ptr< ::narrow_space_navigation::HeightMapResponse const> HeightMapResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator1> & lhs, const ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.pose == rhs.pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator1> & lhs, const ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace narrow_space_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff1dcc0b039e0fde6d4b36e0302e6f22";
  }

  static const char* value(const ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff1dcc0b039e0fdeULL;
  static const uint64_t static_value2 = 0x6d4b36e0302e6f22ULL;
};

template<class ContainerAllocator>
struct DataType< ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "narrow_space_navigation/HeightMapResponse";
  }

  static const char* value(const ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool status\n"
"geometry_msgs/Pose pose\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HeightMapResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::narrow_space_navigation::HeightMapResponse_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NARROW_SPACE_NAVIGATION_MESSAGE_HEIGHTMAPRESPONSE_H
