// Generated by gencpp from file lasr_vision_msgs/BodyPixMaskRequest.msg
// DO NOT EDIT!


#ifndef LASR_VISION_MSGS_MESSAGE_BODYPIXMASKREQUEST_H
#define LASR_VISION_MSGS_MESSAGE_BODYPIXMASKREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lasr_vision_msgs
{
template <class ContainerAllocator>
struct BodyPixMaskRequest_
{
  typedef BodyPixMaskRequest_<ContainerAllocator> Type;

  BodyPixMaskRequest_()
    : parts()  {
    }
  BodyPixMaskRequest_(const ContainerAllocator& _alloc)
    : parts(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _parts_type;
  _parts_type parts;





  typedef boost::shared_ptr< ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator> const> ConstPtr;

}; // struct BodyPixMaskRequest_

typedef ::lasr_vision_msgs::BodyPixMaskRequest_<std::allocator<void> > BodyPixMaskRequest;

typedef boost::shared_ptr< ::lasr_vision_msgs::BodyPixMaskRequest > BodyPixMaskRequestPtr;
typedef boost::shared_ptr< ::lasr_vision_msgs::BodyPixMaskRequest const> BodyPixMaskRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator1> & lhs, const ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator2> & rhs)
{
  return lhs.parts == rhs.parts;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator1> & lhs, const ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lasr_vision_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "61920c0acc31cd7d2b61692a8f73f78b";
  }

  static const char* value(const ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x61920c0acc31cd7dULL;
  static const uint64_t static_value2 = 0x2b61692a8f73f78bULL;
};

template<class ContainerAllocator>
struct DataType< ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lasr_vision_msgs/BodyPixMaskRequest";
  }

  static const char* value(const ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# List of parts\n"
"#\n"
"# A full list is available here:\n"
"# https://github.com/de-code/python-tf-bodypix/blob/develop/tf_bodypix/bodypix_js_utils/part_channels.py#L5\n"
"string[] parts\n"
;
  }

  static const char* value(const ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.parts);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BodyPixMaskRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lasr_vision_msgs::BodyPixMaskRequest_<ContainerAllocator>& v)
  {
    s << indent << "parts[]" << std::endl;
    for (size_t i = 0; i < v.parts.size(); ++i)
    {
      s << indent << "  parts[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.parts[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LASR_VISION_MSGS_MESSAGE_BODYPIXMASKREQUEST_H
