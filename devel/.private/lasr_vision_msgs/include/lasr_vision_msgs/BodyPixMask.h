// Generated by gencpp from file lasr_vision_msgs/BodyPixMask.msg
// DO NOT EDIT!


#ifndef LASR_VISION_MSGS_MESSAGE_BODYPIXMASK_H
#define LASR_VISION_MSGS_MESSAGE_BODYPIXMASK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lasr_vision_msgs
{
template <class ContainerAllocator>
struct BodyPixMask_
{
  typedef BodyPixMask_<ContainerAllocator> Type;

  BodyPixMask_()
    : mask()
    , shape()  {
    }
  BodyPixMask_(const ContainerAllocator& _alloc)
    : mask(_alloc)
    , shape(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _mask_type;
  _mask_type mask;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _shape_type;
  _shape_type shape;





  typedef boost::shared_ptr< ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator> const> ConstPtr;

}; // struct BodyPixMask_

typedef ::lasr_vision_msgs::BodyPixMask_<std::allocator<void> > BodyPixMask;

typedef boost::shared_ptr< ::lasr_vision_msgs::BodyPixMask > BodyPixMaskPtr;
typedef boost::shared_ptr< ::lasr_vision_msgs::BodyPixMask const> BodyPixMaskConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator1> & lhs, const ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator2> & rhs)
{
  return lhs.mask == rhs.mask &&
    lhs.shape == rhs.shape;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator1> & lhs, const ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lasr_vision_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7cdf7dd251c64f79d405b25f2b6644fa";
  }

  static const char* value(const ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7cdf7dd251c64f79ULL;
  static const uint64_t static_value2 = 0xd405b25f2b6644faULL;
};

template<class ContainerAllocator>
struct DataType< ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lasr_vision_msgs/BodyPixMask";
  }

  static const char* value(const ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 1D array of mask\n"
"bool[] mask\n"
"\n"
"# Shape\n"
"#\n"
"# Use in mask.reshape(...shape) to get back 2D array of mask\n"
"uint32[] shape\n"
;
  }

  static const char* value(const ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mask);
      stream.next(m.shape);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BodyPixMask_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator>& v)
  {
    s << indent << "mask[]" << std::endl;
    for (size_t i = 0; i < v.mask.size(); ++i)
    {
      s << indent << "  mask[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.mask[i]);
    }
    s << indent << "shape[]" << std::endl;
    for (size_t i = 0; i < v.shape.size(); ++i)
    {
      s << indent << "  shape[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.shape[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LASR_VISION_MSGS_MESSAGE_BODYPIXMASK_H
