// Generated by gencpp from file lasr_vision_msgs/FeatureWithColour.msg
// DO NOT EDIT!


#ifndef LASR_VISION_MSGS_MESSAGE_FEATUREWITHCOLOUR_H
#define LASR_VISION_MSGS_MESSAGE_FEATUREWITHCOLOUR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <lasr_vision_msgs/ColourPrediction.h>

namespace lasr_vision_msgs
{
template <class ContainerAllocator>
struct FeatureWithColour_
{
  typedef FeatureWithColour_<ContainerAllocator> Type;

  FeatureWithColour_()
    : name()
    , colours()  {
    }
  FeatureWithColour_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , colours(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef std::vector< ::lasr_vision_msgs::ColourPrediction_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::lasr_vision_msgs::ColourPrediction_<ContainerAllocator> >> _colours_type;
  _colours_type colours;





  typedef boost::shared_ptr< ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator> const> ConstPtr;

}; // struct FeatureWithColour_

typedef ::lasr_vision_msgs::FeatureWithColour_<std::allocator<void> > FeatureWithColour;

typedef boost::shared_ptr< ::lasr_vision_msgs::FeatureWithColour > FeatureWithColourPtr;
typedef boost::shared_ptr< ::lasr_vision_msgs::FeatureWithColour const> FeatureWithColourConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator1> & lhs, const ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.colours == rhs.colours;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator1> & lhs, const ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lasr_vision_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator> >
{
  static const char* value()
  {
    return "559e97f1ed0bbb763b8f3f59434ad208";
  }

  static const char* value(const ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x559e97f1ed0bbb76ULL;
  static const uint64_t static_value2 = 0x3b8f3f59434ad208ULL;
};

template<class ContainerAllocator>
struct DataType< ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lasr_vision_msgs/FeatureWithColour";
  }

  static const char* value(const ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Feature name\n"
"string name\n"
"\n"
"# Colour predictions\n"
"lasr_vision_msgs/ColourPrediction[] colours\n"
"\n"
"================================================================================\n"
"MSG: lasr_vision_msgs/ColourPrediction\n"
"# Colour\n"
"string colour\n"
"\n"
"# Distance to the colour\n"
"#\n"
"# Lower = higher chance\n"
"float32 distance\n"
;
  }

  static const char* value(const ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.colours);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FeatureWithColour_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "colours[]" << std::endl;
    for (size_t i = 0; i < v.colours.size(); ++i)
    {
      s << indent << "  colours[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lasr_vision_msgs::ColourPrediction_<ContainerAllocator> >::stream(s, indent + "    ", v.colours[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LASR_VISION_MSGS_MESSAGE_FEATUREWITHCOLOUR_H
