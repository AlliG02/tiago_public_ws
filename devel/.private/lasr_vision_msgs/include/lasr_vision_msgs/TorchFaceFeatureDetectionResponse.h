// Generated by gencpp from file lasr_vision_msgs/TorchFaceFeatureDetectionResponse.msg
// DO NOT EDIT!


#ifndef LASR_VISION_MSGS_MESSAGE_TORCHFACEFEATUREDETECTIONRESPONSE_H
#define LASR_VISION_MSGS_MESSAGE_TORCHFACEFEATUREDETECTIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <lasr_vision_msgs/FeatureWithColour.h>

namespace lasr_vision_msgs
{
template <class ContainerAllocator>
struct TorchFaceFeatureDetectionResponse_
{
  typedef TorchFaceFeatureDetectionResponse_<ContainerAllocator> Type;

  TorchFaceFeatureDetectionResponse_()
    : detected_features()  {
    }
  TorchFaceFeatureDetectionResponse_(const ContainerAllocator& _alloc)
    : detected_features(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator> >> _detected_features_type;
  _detected_features_type detected_features;





  typedef boost::shared_ptr< ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct TorchFaceFeatureDetectionResponse_

typedef ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<std::allocator<void> > TorchFaceFeatureDetectionResponse;

typedef boost::shared_ptr< ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse > TorchFaceFeatureDetectionResponsePtr;
typedef boost::shared_ptr< ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse const> TorchFaceFeatureDetectionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator1> & lhs, const ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.detected_features == rhs.detected_features;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator1> & lhs, const ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lasr_vision_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2b8734399f8e07460a1ef861a79538d2";
  }

  static const char* value(const ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2b8734399f8e0746ULL;
  static const uint64_t static_value2 = 0x0a1ef861a79538d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lasr_vision_msgs/TorchFaceFeatureDetectionResponse";
  }

  static const char* value(const ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Detection result\n"
"lasr_vision_msgs/FeatureWithColour[] detected_features\n"
"\n"
"================================================================================\n"
"MSG: lasr_vision_msgs/FeatureWithColour\n"
"# Feature name\n"
"string name\n"
"\n"
"# Colour predictions\n"
"lasr_vision_msgs/ColourPrediction[] colours\n"
"\n"
"================================================================================\n"
"MSG: lasr_vision_msgs/ColourPrediction\n"
"# Colour\n"
"string colour\n"
"\n"
"# Distance to the colour\n"
"#\n"
"# Lower = higher chance\n"
"float32 distance\n"
;
  }

  static const char* value(const ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detected_features);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TorchFaceFeatureDetectionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lasr_vision_msgs::TorchFaceFeatureDetectionResponse_<ContainerAllocator>& v)
  {
    s << indent << "detected_features[]" << std::endl;
    for (size_t i = 0; i < v.detected_features.size(); ++i)
    {
      s << indent << "  detected_features[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lasr_vision_msgs::FeatureWithColour_<ContainerAllocator> >::stream(s, indent + "    ", v.detected_features[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LASR_VISION_MSGS_MESSAGE_TORCHFACEFEATUREDETECTIONRESPONSE_H
