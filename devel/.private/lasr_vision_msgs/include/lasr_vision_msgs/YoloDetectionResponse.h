// Generated by gencpp from file lasr_vision_msgs/YoloDetectionResponse.msg
// DO NOT EDIT!


#ifndef LASR_VISION_MSGS_MESSAGE_YOLODETECTIONRESPONSE_H
#define LASR_VISION_MSGS_MESSAGE_YOLODETECTIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <lasr_vision_msgs/Detection.h>

namespace lasr_vision_msgs
{
template <class ContainerAllocator>
struct YoloDetectionResponse_
{
  typedef YoloDetectionResponse_<ContainerAllocator> Type;

  YoloDetectionResponse_()
    : detected_objects()  {
    }
  YoloDetectionResponse_(const ContainerAllocator& _alloc)
    : detected_objects(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::lasr_vision_msgs::Detection_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::lasr_vision_msgs::Detection_<ContainerAllocator> >> _detected_objects_type;
  _detected_objects_type detected_objects;





  typedef boost::shared_ptr< ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct YoloDetectionResponse_

typedef ::lasr_vision_msgs::YoloDetectionResponse_<std::allocator<void> > YoloDetectionResponse;

typedef boost::shared_ptr< ::lasr_vision_msgs::YoloDetectionResponse > YoloDetectionResponsePtr;
typedef boost::shared_ptr< ::lasr_vision_msgs::YoloDetectionResponse const> YoloDetectionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator1> & lhs, const ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.detected_objects == rhs.detected_objects;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator1> & lhs, const ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lasr_vision_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ede9d9587aef5a63081c4a5abc013156";
  }

  static const char* value(const ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xede9d9587aef5a63ULL;
  static const uint64_t static_value2 = 0x081c4a5abc013156ULL;
};

template<class ContainerAllocator>
struct DataType< ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lasr_vision_msgs/YoloDetectionResponse";
  }

  static const char* value(const ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Detection result\n"
"lasr_vision_msgs/Detection[] detected_objects\n"
"\n"
"================================================================================\n"
"MSG: lasr_vision_msgs/Detection\n"
"# Detected Object Class\n"
"string name\n"
"\n"
"# How certain we are this is what we think it is\n"
"float32 confidence\n"
"\n"
"# Bounding box mask defined in pixel-space\n"
"int32[] xywh\n"
"\n"
"# Segmentation mask defined in pixel-space\n"
"#\n"
"# This will be empty if a segmentation model was not used\n"
"int32[] xyseg\n"
;
  }

  static const char* value(const ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detected_objects);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct YoloDetectionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lasr_vision_msgs::YoloDetectionResponse_<ContainerAllocator>& v)
  {
    s << indent << "detected_objects[]" << std::endl;
    for (size_t i = 0; i < v.detected_objects.size(); ++i)
    {
      s << indent << "  detected_objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lasr_vision_msgs::Detection_<ContainerAllocator> >::stream(s, indent + "    ", v.detected_objects[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LASR_VISION_MSGS_MESSAGE_YOLODETECTIONRESPONSE_H
