// Generated by gencpp from file lasr_vision_msgs/BodyPixDetectionResponse.msg
// DO NOT EDIT!


#ifndef LASR_VISION_MSGS_MESSAGE_BODYPIXDETECTIONRESPONSE_H
#define LASR_VISION_MSGS_MESSAGE_BODYPIXDETECTIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <lasr_vision_msgs/BodyPixMask.h>
#include <lasr_vision_msgs/BodyPixPose.h>

namespace lasr_vision_msgs
{
template <class ContainerAllocator>
struct BodyPixDetectionResponse_
{
  typedef BodyPixDetectionResponse_<ContainerAllocator> Type;

  BodyPixDetectionResponse_()
    : masks()
    , poses()  {
    }
  BodyPixDetectionResponse_(const ContainerAllocator& _alloc)
    : masks(_alloc)
    , poses(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator> >> _masks_type;
  _masks_type masks;

   typedef std::vector< ::lasr_vision_msgs::BodyPixPose_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::lasr_vision_msgs::BodyPixPose_<ContainerAllocator> >> _poses_type;
  _poses_type poses;





  typedef boost::shared_ptr< ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator> const> ConstPtr;

}; // struct BodyPixDetectionResponse_

typedef ::lasr_vision_msgs::BodyPixDetectionResponse_<std::allocator<void> > BodyPixDetectionResponse;

typedef boost::shared_ptr< ::lasr_vision_msgs::BodyPixDetectionResponse > BodyPixDetectionResponsePtr;
typedef boost::shared_ptr< ::lasr_vision_msgs::BodyPixDetectionResponse const> BodyPixDetectionResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator1> & lhs, const ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator2> & rhs)
{
  return lhs.masks == rhs.masks &&
    lhs.poses == rhs.poses;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator1> & lhs, const ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lasr_vision_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c7748b1e80932ee8c80a3152221ccdbd";
  }

  static const char* value(const ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc7748b1e80932ee8ULL;
  static const uint64_t static_value2 = 0xc80a3152221ccdbdULL;
};

template<class ContainerAllocator>
struct DataType< ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lasr_vision_msgs/BodyPixDetectionResponse";
  }

  static const char* value(const ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Generated masks\n"
"lasr_vision_msgs/BodyPixMask[] masks\n"
"\n"
"# Pose information\n"
"lasr_vision_msgs/BodyPixPose[] poses\n"
"\n"
"\n"
"================================================================================\n"
"MSG: lasr_vision_msgs/BodyPixMask\n"
"# 1D array of mask\n"
"bool[] mask\n"
"\n"
"# Shape\n"
"#\n"
"# Use in mask.reshape(...shape) to get back 2D array of mask\n"
"uint32[] shape\n"
"\n"
"================================================================================\n"
"MSG: lasr_vision_msgs/BodyPixPose\n"
"# https://github.com/de-code/python-tf-bodypix/blob/develop/tf_bodypix/bodypix_js_utils/types.py\n"
;
  }

  static const char* value(const ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.masks);
      stream.next(m.poses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BodyPixDetectionResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lasr_vision_msgs::BodyPixDetectionResponse_<ContainerAllocator>& v)
  {
    s << indent << "masks[]" << std::endl;
    for (size_t i = 0; i < v.masks.size(); ++i)
    {
      s << indent << "  masks[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lasr_vision_msgs::BodyPixMask_<ContainerAllocator> >::stream(s, indent + "    ", v.masks[i]);
    }
    s << indent << "poses[]" << std::endl;
    for (size_t i = 0; i < v.poses.size(); ++i)
    {
      s << indent << "  poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lasr_vision_msgs::BodyPixPose_<ContainerAllocator> >::stream(s, indent + "    ", v.poses[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LASR_VISION_MSGS_MESSAGE_BODYPIXDETECTIONRESPONSE_H
