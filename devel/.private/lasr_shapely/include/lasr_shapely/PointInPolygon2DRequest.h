// Generated by gencpp from file lasr_shapely/PointInPolygon2DRequest.msg
// DO NOT EDIT!


#ifndef LASR_SHAPELY_MESSAGE_POINTINPOLYGON2DREQUEST_H
#define LASR_SHAPELY_MESSAGE_POINTINPOLYGON2DREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lasr_shapely
{
template <class ContainerAllocator>
struct PointInPolygon2DRequest_
{
  typedef PointInPolygon2DRequest_<ContainerAllocator> Type;

  PointInPolygon2DRequest_()
    : polygon()
    , x(0.0)
    , y(0.0)  {
    }
  PointInPolygon2DRequest_(const ContainerAllocator& _alloc)
    : polygon(_alloc)
    , x(0.0)
    , y(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _polygon_type;
  _polygon_type polygon;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;





  typedef boost::shared_ptr< ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PointInPolygon2DRequest_

typedef ::lasr_shapely::PointInPolygon2DRequest_<std::allocator<void> > PointInPolygon2DRequest;

typedef boost::shared_ptr< ::lasr_shapely::PointInPolygon2DRequest > PointInPolygon2DRequestPtr;
typedef boost::shared_ptr< ::lasr_shapely::PointInPolygon2DRequest const> PointInPolygon2DRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator1> & lhs, const ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator2> & rhs)
{
  return lhs.polygon == rhs.polygon &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator1> & lhs, const ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lasr_shapely

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e4da2be5c13fc25f960614f08b6a5f1a";
  }

  static const char* value(const ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe4da2be5c13fc25fULL;
  static const uint64_t static_value2 = 0x960614f08b6a5f1aULL;
};

template<class ContainerAllocator>
struct DataType< ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lasr_shapely/PointInPolygon2DRequest";
  }

  static const char* value(const ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 1D-array of ordered pairs of points (connected by edge) that define the polygon\n"
"float32[] polygon\n"
"# X coordinate of point\n"
"float32 x\n"
"# Y coordinate of point\n"
"float32 y\n"
;
  }

  static const char* value(const ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.polygon);
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PointInPolygon2DRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lasr_shapely::PointInPolygon2DRequest_<ContainerAllocator>& v)
  {
    s << indent << "polygon[]" << std::endl;
    for (size_t i = 0; i < v.polygon.size(); ++i)
    {
      s << indent << "  polygon[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.polygon[i]);
    }
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LASR_SHAPELY_MESSAGE_POINTINPOLYGON2DREQUEST_H
