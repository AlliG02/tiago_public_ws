// Generated by gencpp from file aruco_service/SaveNavigationPointRequest.msg
// DO NOT EDIT!


#ifndef ARUCO_SERVICE_MESSAGE_SAVENAVIGATIONPOINTREQUEST_H
#define ARUCO_SERVICE_MESSAGE_SAVENAVIGATIONPOINTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aruco_service
{
template <class ContainerAllocator>
struct SaveNavigationPointRequest_
{
  typedef SaveNavigationPointRequest_<ContainerAllocator> Type;

  SaveNavigationPointRequest_()
    : table(0)  {
    }
  SaveNavigationPointRequest_(const ContainerAllocator& _alloc)
    : table(0)  {
  (void)_alloc;
    }



   typedef int8_t _table_type;
  _table_type table;





  typedef boost::shared_ptr< ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SaveNavigationPointRequest_

typedef ::aruco_service::SaveNavigationPointRequest_<std::allocator<void> > SaveNavigationPointRequest;

typedef boost::shared_ptr< ::aruco_service::SaveNavigationPointRequest > SaveNavigationPointRequestPtr;
typedef boost::shared_ptr< ::aruco_service::SaveNavigationPointRequest const> SaveNavigationPointRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator1> & lhs, const ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator2> & rhs)
{
  return lhs.table == rhs.table;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator1> & lhs, const ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace aruco_service

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c62310621d06b36148900c9fb5e61f3a";
  }

  static const char* value(const ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc62310621d06b361ULL;
  static const uint64_t static_value2 = 0x48900c9fb5e61f3aULL;
};

template<class ContainerAllocator>
struct DataType< ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aruco_service/SaveNavigationPointRequest";
  }

  static const char* value(const ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 table\n"
;
  }

  static const char* value(const ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.table);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SaveNavigationPointRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aruco_service::SaveNavigationPointRequest_<ContainerAllocator>& v)
  {
    s << indent << "table: ";
    Printer<int8_t>::stream(s, indent + "  ", v.table);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARUCO_SERVICE_MESSAGE_SAVENAVIGATIONPOINTREQUEST_H
