// Generated by gencpp from file aruco_service/GenerateTableCuboidRequest.msg
// DO NOT EDIT!


#ifndef ARUCO_SERVICE_MESSAGE_GENERATETABLECUBOIDREQUEST_H
#define ARUCO_SERVICE_MESSAGE_GENERATETABLECUBOIDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace aruco_service
{
template <class ContainerAllocator>
struct GenerateTableCuboidRequest_
{
  typedef GenerateTableCuboidRequest_<ContainerAllocator> Type;

  GenerateTableCuboidRequest_()
    : table(0)
    , long_side(0.0)
    , short_side(0.0)
    , padding(0.0)
    , is_rect(false)
    , radius(0.0)  {
    }
  GenerateTableCuboidRequest_(const ContainerAllocator& _alloc)
    : table(0)
    , long_side(0.0)
    , short_side(0.0)
    , padding(0.0)
    , is_rect(false)
    , radius(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _table_type;
  _table_type table;

   typedef double _long_side_type;
  _long_side_type long_side;

   typedef double _short_side_type;
  _short_side_type short_side;

   typedef double _padding_type;
  _padding_type padding;

   typedef uint8_t _is_rect_type;
  _is_rect_type is_rect;

   typedef double _radius_type;
  _radius_type radius;





  typedef boost::shared_ptr< ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GenerateTableCuboidRequest_

typedef ::aruco_service::GenerateTableCuboidRequest_<std::allocator<void> > GenerateTableCuboidRequest;

typedef boost::shared_ptr< ::aruco_service::GenerateTableCuboidRequest > GenerateTableCuboidRequestPtr;
typedef boost::shared_ptr< ::aruco_service::GenerateTableCuboidRequest const> GenerateTableCuboidRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator1> & lhs, const ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator2> & rhs)
{
  return lhs.table == rhs.table &&
    lhs.long_side == rhs.long_side &&
    lhs.short_side == rhs.short_side &&
    lhs.padding == rhs.padding &&
    lhs.is_rect == rhs.is_rect &&
    lhs.radius == rhs.radius;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator1> & lhs, const ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace aruco_service

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6bd5a25d1e39ec0af0c20654fb9516fb";
  }

  static const char* value(const ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6bd5a25d1e39ec0aULL;
  static const uint64_t static_value2 = 0xf0c20654fb9516fbULL;
};

template<class ContainerAllocator>
struct DataType< ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aruco_service/GenerateTableCuboidRequest";
  }

  static const char* value(const ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 table\n"
"float64 long_side\n"
"float64 short_side\n"
"float64 padding\n"
"bool is_rect\n"
"float64 radius\n"
;
  }

  static const char* value(const ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.table);
      stream.next(m.long_side);
      stream.next(m.short_side);
      stream.next(m.padding);
      stream.next(m.is_rect);
      stream.next(m.radius);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GenerateTableCuboidRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aruco_service::GenerateTableCuboidRequest_<ContainerAllocator>& v)
  {
    s << indent << "table: ";
    Printer<int8_t>::stream(s, indent + "  ", v.table);
    s << indent << "long_side: ";
    Printer<double>::stream(s, indent + "  ", v.long_side);
    s << indent << "short_side: ";
    Printer<double>::stream(s, indent + "  ", v.short_side);
    s << indent << "padding: ";
    Printer<double>::stream(s, indent + "  ", v.padding);
    s << indent << "is_rect: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_rect);
    s << indent << "radius: ";
    Printer<double>::stream(s, indent + "  ", v.radius);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARUCO_SERVICE_MESSAGE_GENERATETABLECUBOIDREQUEST_H
