// Generated by gencpp from file interaction_module/AudioAndTextInteractionRequest.msg
// DO NOT EDIT!


#ifndef INTERACTION_MODULE_MESSAGE_AUDIOANDTEXTINTERACTIONREQUEST_H
#define INTERACTION_MODULE_MESSAGE_AUDIOANDTEXTINTERACTIONREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace interaction_module
{
template <class ContainerAllocator>
struct AudioAndTextInteractionRequest_
{
  typedef AudioAndTextInteractionRequest_<ContainerAllocator> Type;

  AudioAndTextInteractionRequest_()
    : action()
    , subaction()
    , query_text()  {
    }
  AudioAndTextInteractionRequest_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , subaction(_alloc)
    , query_text(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _subaction_type;
  _subaction_type subaction;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _query_text_type;
  _query_text_type query_text;





  typedef boost::shared_ptr< ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AudioAndTextInteractionRequest_

typedef ::interaction_module::AudioAndTextInteractionRequest_<std::allocator<void> > AudioAndTextInteractionRequest;

typedef boost::shared_ptr< ::interaction_module::AudioAndTextInteractionRequest > AudioAndTextInteractionRequestPtr;
typedef boost::shared_ptr< ::interaction_module::AudioAndTextInteractionRequest const> AudioAndTextInteractionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator1> & lhs, const ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.subaction == rhs.subaction &&
    lhs.query_text == rhs.query_text;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator1> & lhs, const ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace interaction_module

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f2582543b12406a0e716cac33410996e";
  }

  static const char* value(const ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf2582543b12406a0ULL;
  static const uint64_t static_value2 = 0xe716cac33410996eULL;
};

template<class ContainerAllocator>
struct DataType< ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "interaction_module/AudioAndTextInteractionRequest";
  }

  static const char* value(const ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string action\n"
"string subaction\n"
"string query_text\n"
;
  }

  static const char* value(const ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.subaction);
      stream.next(m.query_text);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AudioAndTextInteractionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::interaction_module::AudioAndTextInteractionRequest_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.action);
    s << indent << "subaction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.subaction);
    s << indent << "query_text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.query_text);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INTERACTION_MODULE_MESSAGE_AUDIOANDTEXTINTERACTIONREQUEST_H
