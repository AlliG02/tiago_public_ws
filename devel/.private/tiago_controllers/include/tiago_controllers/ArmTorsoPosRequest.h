// Generated by gencpp from file tiago_controllers/ArmTorsoPosRequest.msg
// DO NOT EDIT!


#ifndef TIAGO_CONTROLLERS_MESSAGE_ARMTORSOPOSREQUEST_H
#define TIAGO_CONTROLLERS_MESSAGE_ARMTORSOPOSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tiago_controllers
{
template <class ContainerAllocator>
struct ArmTorsoPosRequest_
{
  typedef ArmTorsoPosRequest_<ContainerAllocator> Type;

  ArmTorsoPosRequest_()
    : torso_goals(0.0)
    , arm_goals()
    , plan(false)  {
    }
  ArmTorsoPosRequest_(const ContainerAllocator& _alloc)
    : torso_goals(0.0)
    , arm_goals(_alloc)
    , plan(false)  {
  (void)_alloc;
    }



   typedef float _torso_goals_type;
  _torso_goals_type torso_goals;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _arm_goals_type;
  _arm_goals_type arm_goals;

   typedef uint8_t _plan_type;
  _plan_type plan;





  typedef boost::shared_ptr< ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ArmTorsoPosRequest_

typedef ::tiago_controllers::ArmTorsoPosRequest_<std::allocator<void> > ArmTorsoPosRequest;

typedef boost::shared_ptr< ::tiago_controllers::ArmTorsoPosRequest > ArmTorsoPosRequestPtr;
typedef boost::shared_ptr< ::tiago_controllers::ArmTorsoPosRequest const> ArmTorsoPosRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator1> & lhs, const ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator2> & rhs)
{
  return lhs.torso_goals == rhs.torso_goals &&
    lhs.arm_goals == rhs.arm_goals &&
    lhs.plan == rhs.plan;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator1> & lhs, const ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tiago_controllers

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5aab766011fe9a515de15247be541bd7";
  }

  static const char* value(const ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5aab766011fe9a51ULL;
  static const uint64_t static_value2 = 0x5de15247be541bd7ULL;
};

template<class ContainerAllocator>
struct DataType< ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tiago_controllers/ArmTorsoPosRequest";
  }

  static const char* value(const ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 torso_goals\n"
"float32[] arm_goals\n"
"bool plan\n"
;
  }

  static const char* value(const ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.torso_goals);
      stream.next(m.arm_goals);
      stream.next(m.plan);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ArmTorsoPosRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tiago_controllers::ArmTorsoPosRequest_<ContainerAllocator>& v)
  {
    s << indent << "torso_goals: ";
    Printer<float>::stream(s, indent + "  ", v.torso_goals);
    s << indent << "arm_goals[]" << std::endl;
    for (size_t i = 0; i < v.arm_goals.size(); ++i)
    {
      s << indent << "  arm_goals[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.arm_goals[i]);
    }
    s << indent << "plan: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.plan);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TIAGO_CONTROLLERS_MESSAGE_ARMTORSOPOSREQUEST_H
