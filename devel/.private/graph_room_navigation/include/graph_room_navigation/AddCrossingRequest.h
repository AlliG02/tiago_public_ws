// Generated by gencpp from file graph_room_navigation/AddCrossingRequest.msg
// DO NOT EDIT!


#ifndef GRAPH_ROOM_NAVIGATION_MESSAGE_ADDCROSSINGREQUEST_H
#define GRAPH_ROOM_NAVIGATION_MESSAGE_ADDCROSSINGREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace graph_room_navigation
{
template <class ContainerAllocator>
struct AddCrossingRequest_
{
  typedef AddCrossingRequest_<ContainerAllocator> Type;

  AddCrossingRequest_()
    : room1()
    , door1()
    , room2()
    , door2()  {
    }
  AddCrossingRequest_(const ContainerAllocator& _alloc)
    : room1(_alloc)
    , door1(_alloc)
    , room2(_alloc)
    , door2(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _room1_type;
  _room1_type room1;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _door1_type;
  _door1_type door1;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _room2_type;
  _room2_type room2;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _door2_type;
  _door2_type door2;





  typedef boost::shared_ptr< ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AddCrossingRequest_

typedef ::graph_room_navigation::AddCrossingRequest_<std::allocator<void> > AddCrossingRequest;

typedef boost::shared_ptr< ::graph_room_navigation::AddCrossingRequest > AddCrossingRequestPtr;
typedef boost::shared_ptr< ::graph_room_navigation::AddCrossingRequest const> AddCrossingRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator1> & lhs, const ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator2> & rhs)
{
  return lhs.room1 == rhs.room1 &&
    lhs.door1 == rhs.door1 &&
    lhs.room2 == rhs.room2 &&
    lhs.door2 == rhs.door2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator1> & lhs, const ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graph_room_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "38eeb2ed3fb02672bfd82cd339bd4d74";
  }

  static const char* value(const ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x38eeb2ed3fb02672ULL;
  static const uint64_t static_value2 = 0xbfd82cd339bd4d74ULL;
};

template<class ContainerAllocator>
struct DataType< ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_room_navigation/AddCrossingRequest";
  }

  static const char* value(const ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string room1\n"
"geometry_msgs/Point door1\n"
"string room2\n"
"geometry_msgs/Point door2\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.room1);
      stream.next(m.door1);
      stream.next(m.room2);
      stream.next(m.door2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddCrossingRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graph_room_navigation::AddCrossingRequest_<ContainerAllocator>& v)
  {
    s << indent << "room1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.room1);
    s << indent << "door1: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.door1);
    s << indent << "room2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.room2);
    s << indent << "door2: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.door2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAPH_ROOM_NAVIGATION_MESSAGE_ADDCROSSINGREQUEST_H
