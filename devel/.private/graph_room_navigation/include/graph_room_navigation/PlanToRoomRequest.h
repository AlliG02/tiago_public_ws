// Generated by gencpp from file graph_room_navigation/PlanToRoomRequest.msg
// DO NOT EDIT!


#ifndef GRAPH_ROOM_NAVIGATION_MESSAGE_PLANTOROOMREQUEST_H
#define GRAPH_ROOM_NAVIGATION_MESSAGE_PLANTOROOMREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace graph_room_navigation
{
template <class ContainerAllocator>
struct PlanToRoomRequest_
{
  typedef PlanToRoomRequest_<ContainerAllocator> Type;

  PlanToRoomRequest_()
    : goal_room()  {
    }
  PlanToRoomRequest_(const ContainerAllocator& _alloc)
    : goal_room(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _goal_room_type;
  _goal_room_type goal_room;





  typedef boost::shared_ptr< ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PlanToRoomRequest_

typedef ::graph_room_navigation::PlanToRoomRequest_<std::allocator<void> > PlanToRoomRequest;

typedef boost::shared_ptr< ::graph_room_navigation::PlanToRoomRequest > PlanToRoomRequestPtr;
typedef boost::shared_ptr< ::graph_room_navigation::PlanToRoomRequest const> PlanToRoomRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator1> & lhs, const ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator2> & rhs)
{
  return lhs.goal_room == rhs.goal_room;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator1> & lhs, const ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graph_room_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7fe206b0b01efb97dca5bb2ebd337054";
  }

  static const char* value(const ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7fe206b0b01efb97ULL;
  static const uint64_t static_value2 = 0xdca5bb2ebd337054ULL;
};

template<class ContainerAllocator>
struct DataType< ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_room_navigation/PlanToRoomRequest";
  }

  static const char* value(const ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string goal_room\n"
;
  }

  static const char* value(const ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_room);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanToRoomRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graph_room_navigation::PlanToRoomRequest_<ContainerAllocator>& v)
  {
    s << indent << "goal_room: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.goal_room);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAPH_ROOM_NAVIGATION_MESSAGE_PLANTOROOMREQUEST_H
