// Generated by gencpp from file graph_room_navigation/AddRoomRequest.msg
// DO NOT EDIT!


#ifndef GRAPH_ROOM_NAVIGATION_MESSAGE_ADDROOMREQUEST_H
#define GRAPH_ROOM_NAVIGATION_MESSAGE_ADDROOMREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace graph_room_navigation
{
template <class ContainerAllocator>
struct AddRoomRequest_
{
  typedef AddRoomRequest_<ContainerAllocator> Type;

  AddRoomRequest_()
    : name()
    , a()
    , b()  {
    }
  AddRoomRequest_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , a(_alloc)
    , b(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _a_type;
  _a_type a;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _b_type;
  _b_type b;





  typedef boost::shared_ptr< ::graph_room_navigation::AddRoomRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::graph_room_navigation::AddRoomRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AddRoomRequest_

typedef ::graph_room_navigation::AddRoomRequest_<std::allocator<void> > AddRoomRequest;

typedef boost::shared_ptr< ::graph_room_navigation::AddRoomRequest > AddRoomRequestPtr;
typedef boost::shared_ptr< ::graph_room_navigation::AddRoomRequest const> AddRoomRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::graph_room_navigation::AddRoomRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::graph_room_navigation::AddRoomRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::graph_room_navigation::AddRoomRequest_<ContainerAllocator1> & lhs, const ::graph_room_navigation::AddRoomRequest_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.a == rhs.a &&
    lhs.b == rhs.b;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::graph_room_navigation::AddRoomRequest_<ContainerAllocator1> & lhs, const ::graph_room_navigation::AddRoomRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace graph_room_navigation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::graph_room_navigation::AddRoomRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::graph_room_navigation::AddRoomRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_room_navigation::AddRoomRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::graph_room_navigation::AddRoomRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_room_navigation::AddRoomRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::graph_room_navigation::AddRoomRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::graph_room_navigation::AddRoomRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "129ef876d57e0d4fa57d84a0e519640f";
  }

  static const char* value(const ::graph_room_navigation::AddRoomRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x129ef876d57e0d4fULL;
  static const uint64_t static_value2 = 0xa57d84a0e519640fULL;
};

template<class ContainerAllocator>
struct DataType< ::graph_room_navigation::AddRoomRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "graph_room_navigation/AddRoomRequest";
  }

  static const char* value(const ::graph_room_navigation::AddRoomRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::graph_room_navigation::AddRoomRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"geometry_msgs/Point a\n"
"geometry_msgs/Point b\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::graph_room_navigation::AddRoomRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::graph_room_navigation::AddRoomRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.a);
      stream.next(m.b);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddRoomRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::graph_room_navigation::AddRoomRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::graph_room_navigation::AddRoomRequest_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "a: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.a);
    s << indent << "b: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.b);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRAPH_ROOM_NAVIGATION_MESSAGE_ADDROOMREQUEST_H
