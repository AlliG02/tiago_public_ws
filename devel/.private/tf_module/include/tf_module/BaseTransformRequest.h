// Generated by gencpp from file tf_module/BaseTransformRequest.msg
// DO NOT EDIT!


#ifndef TF_MODULE_MESSAGE_BASETRANSFORMREQUEST_H
#define TF_MODULE_MESSAGE_BASETRANSFORMREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <std_msgs/String.h>
#include <std_msgs/String.h>

namespace tf_module
{
template <class ContainerAllocator>
struct BaseTransformRequest_
{
  typedef BaseTransformRequest_<ContainerAllocator> Type;

  BaseTransformRequest_()
    : points()
    , frame()
    , target_frame()  {
    }
  BaseTransformRequest_(const ContainerAllocator& _alloc)
    : points(_alloc)
    , frame(_alloc)
    , target_frame(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _points_type;
  _points_type points;

   typedef  ::std_msgs::String_<ContainerAllocator>  _frame_type;
  _frame_type frame;

   typedef  ::std_msgs::String_<ContainerAllocator>  _target_frame_type;
  _target_frame_type target_frame;





  typedef boost::shared_ptr< ::tf_module::BaseTransformRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tf_module::BaseTransformRequest_<ContainerAllocator> const> ConstPtr;

}; // struct BaseTransformRequest_

typedef ::tf_module::BaseTransformRequest_<std::allocator<void> > BaseTransformRequest;

typedef boost::shared_ptr< ::tf_module::BaseTransformRequest > BaseTransformRequestPtr;
typedef boost::shared_ptr< ::tf_module::BaseTransformRequest const> BaseTransformRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tf_module::BaseTransformRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tf_module::BaseTransformRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tf_module::BaseTransformRequest_<ContainerAllocator1> & lhs, const ::tf_module::BaseTransformRequest_<ContainerAllocator2> & rhs)
{
  return lhs.points == rhs.points &&
    lhs.frame == rhs.frame &&
    lhs.target_frame == rhs.target_frame;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tf_module::BaseTransformRequest_<ContainerAllocator1> & lhs, const ::tf_module::BaseTransformRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tf_module

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tf_module::BaseTransformRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tf_module::BaseTransformRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tf_module::BaseTransformRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tf_module::BaseTransformRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tf_module::BaseTransformRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tf_module::BaseTransformRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tf_module::BaseTransformRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "00bd9f6f9309508c982617f183a10fb4";
  }

  static const char* value(const ::tf_module::BaseTransformRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x00bd9f6f9309508cULL;
  static const uint64_t static_value2 = 0x982617f183a10fb4ULL;
};

template<class ContainerAllocator>
struct DataType< ::tf_module::BaseTransformRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tf_module/BaseTransformRequest";
  }

  static const char* value(const ::tf_module::BaseTransformRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tf_module::BaseTransformRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[]         points          # point we want to transform\n"
"std_msgs/String               frame           # the frame of the point\n"
"std_msgs/String               target_frame    # the frame we want to transform the point to\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::tf_module::BaseTransformRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tf_module::BaseTransformRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.points);
      stream.next(m.frame);
      stream.next(m.target_frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BaseTransformRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tf_module::BaseTransformRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tf_module::BaseTransformRequest_<ContainerAllocator>& v)
  {
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "frame: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.frame);
    s << indent << "target_frame: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.target_frame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TF_MODULE_MESSAGE_BASETRANSFORMREQUEST_H
