// Generated by gencpp from file tf_module/LatestTransformRequest.msg
// DO NOT EDIT!


#ifndef TF_MODULE_MESSAGE_LATESTTRANSFORMREQUEST_H
#define TF_MODULE_MESSAGE_LATESTTRANSFORMREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tf_module
{
template <class ContainerAllocator>
struct LatestTransformRequest_
{
  typedef LatestTransformRequest_<ContainerAllocator> Type;

  LatestTransformRequest_()
    : from_frame()
    , target_frame()  {
    }
  LatestTransformRequest_(const ContainerAllocator& _alloc)
    : from_frame(_alloc)
    , target_frame(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _from_frame_type;
  _from_frame_type from_frame;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _target_frame_type;
  _target_frame_type target_frame;





  typedef boost::shared_ptr< ::tf_module::LatestTransformRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tf_module::LatestTransformRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LatestTransformRequest_

typedef ::tf_module::LatestTransformRequest_<std::allocator<void> > LatestTransformRequest;

typedef boost::shared_ptr< ::tf_module::LatestTransformRequest > LatestTransformRequestPtr;
typedef boost::shared_ptr< ::tf_module::LatestTransformRequest const> LatestTransformRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tf_module::LatestTransformRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tf_module::LatestTransformRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tf_module::LatestTransformRequest_<ContainerAllocator1> & lhs, const ::tf_module::LatestTransformRequest_<ContainerAllocator2> & rhs)
{
  return lhs.from_frame == rhs.from_frame &&
    lhs.target_frame == rhs.target_frame;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tf_module::LatestTransformRequest_<ContainerAllocator1> & lhs, const ::tf_module::LatestTransformRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tf_module

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tf_module::LatestTransformRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tf_module::LatestTransformRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tf_module::LatestTransformRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tf_module::LatestTransformRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tf_module::LatestTransformRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tf_module::LatestTransformRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tf_module::LatestTransformRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aa74044210ba146c3cd6af08f934ea1b";
  }

  static const char* value(const ::tf_module::LatestTransformRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xaa74044210ba146cULL;
  static const uint64_t static_value2 = 0x3cd6af08f934ea1bULL;
};

template<class ContainerAllocator>
struct DataType< ::tf_module::LatestTransformRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tf_module/LatestTransformRequest";
  }

  static const char* value(const ::tf_module::LatestTransformRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tf_module::LatestTransformRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string from_frame # source frame\n"
"string target_frame # target frame\n"
;
  }

  static const char* value(const ::tf_module::LatestTransformRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tf_module::LatestTransformRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.from_frame);
      stream.next(m.target_frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LatestTransformRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tf_module::LatestTransformRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tf_module::LatestTransformRequest_<ContainerAllocator>& v)
  {
    s << indent << "from_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.from_frame);
    s << indent << "target_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.target_frame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TF_MODULE_MESSAGE_LATESTTRANSFORMREQUEST_H
